import json
import locale
import reports
import emails
import os


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def getSales(data,year):
  total = 0
  for item in data:
    if item['car']['car_year'] == year:
      total += item['total_sales']
  return total

def getMostPopularYear(car_years_freq):
  data = sorted(car_years_freq.items(),key=lambda item:item[1],reverse=True)
  return data[0][0]

def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {'total_sales':0}
  # dictionary that maps a particular year, and how many total car sales were for that year
  car_years_freq = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    # get most sales
    if item['total_sales'] > max_sales['total_sales']:
      max_sales = item

    # get most popular car year
    year = item['car']['car_year']
    car_years_freq[year] = car_years_freq.get(year,0) + 1


  most_popular_year = getMostPopularYear(car_years_freq)
  sales_in_most_popular_year = getSales(data,most_popular_year)
  summary = [
    "The {} generated the most revenue: ${}.".format(format_car(max_revenue["car"]),max_revenue["revenue"]),
    "The {} had the most sales with {} sales.".format(max_sales['car']['car_model'],max_sales['total_sales']),
    "The most popular year was {} with {} sales.".format(most_popular_year,sales_in_most_popular_year)
  ]

  return summary


def cars_dict_to_table(data):
  table_data = [ ["ID","Car","Price","Total Sales"] ]
  for item in data:
    table_data.append([ item['id'],format_car(item['car']),item['price'],item['total_sales'] ])
  return table_data

def sort_by_sales(data):
  # its a list of dictionaries, so you can just sort each dictionary in the list based on the total_sales key
  # The sorted function is specifically for lists thats why

  sorted_by_sales_data = sorted(data,key = lambda item:item['total_sales'],reverse=True)
  return sorted_by_sales_data

def getRevenue(item):
  item_price = locale.atof(item["price"].strip("$"))
  return item["total_sales"] * item_price

def sort_by_revenue(data):
  sorted_by_revenue_data = sorted(data,key=getRevenue,reverse=True)
  return sorted_by_revenue_data

def getTop10(sorted_by_revenue_data):
  car_names = []
  total_sales = []
  for i in range(10):
    car_names.append(format_car(sorted_by_revenue_data[i]['car']))
    total_sales.append(round((getRevenue(sorted_by_revenue_data[i])) / 100000))

  return car_names,total_sales

def main(filename):
  """Process the JSON data and generate a full report out of it."""
  data = load_data(filename)
  summary = process_data(data)

  sorted_by_sales_data = sort_by_sales(data)
  table_data = cars_dict_to_table(sorted_by_sales_data)

  pdf_body = '<br/>'.join(summary)
  reports.generate('cars.pdf','Sales summary for last month',pdf_body,table_data)

  sender = 'mpono000@gmail.com'
  recipient = 'mpono000@gmail.com'
  subject = "Sales summary for last month"
  email_body = '\n'.join(summary)
  password = 'rstaccqtruorfkem'

  # top10 revenue best seller cars bar graph
  sorted_by_revenue_data = sort_by_revenue(data)
  top10 = getTop10(sorted_by_revenue_data)

  bar_title = "Top 10 best selling cars and their revenue"
  bar_body = """<br/><br/><br/>The x axis represents that car's name.
  The y axis represents the total revenue of each car in 100,000s.
  """

  reports.generateBarChart('bar_graph.pdf',bar_title,bar_body,top10[0],top10[1])

  attachments = ['cars.pdf','bar_graph.pdf']

  email = emails.generate(sender,recipient,subject,email_body,attachments)
  emails.send(email,sender,password)

main('car_sales.json')